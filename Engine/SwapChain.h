#pragma once

// 교환 사슬
// [외주 과정]
// - 현재 게임 세상에 있는 상황을 묘사
// - 어떤 공식으로 어떻게 계산할지 던져줌
// - GPU가 열심히 계산 (외주)
// - 결과물 받아서 화면에 그려준다

// [외주 결과물]을 어디에 받지?
// - 어떤 종이(Buffer)에 그려서 건내달라고 부탁해보자
// - 특수 종이를 만들어서 -> 처음에 건내주고 -> 결과물을 해당 종이에 받는다 OK
// - 우리 화면에 특수 종이(외주 결과물) 출력해준다

// [?]
// - 그런데 화면에 현재 결과물 출력하는 와중에, 다음 화면도 외주를 맡겨야 함
// - 현재 화면 결과물은 이미 화면 출력에 사용중
// - 특수 종이를 2개 만들어서, 하나는 현재 화면을 그려주고, 하나는 외주 맡기고...
// - Double Buffering!

// - [0] [1]
// 현재 화면 [1]  <-> GPU 작업중 [2] BackBuffer
// -> [2] 작업 완료
// -> 현재 화면 [2]  <-> GPU 작업중 [1] BackBuffer
// -> ... 반복

// Double Buffering을 이용해 화면출력과 BackBuffer작업 처리
// 구식 소총 느낌? 총을 쏘고 뒤는 장전 뒤가 앞에 나와 총을 쏘고 앞은 뒤로가 총을 장전...



class SwapChain
{
public:
	void Init(const WindowInfo& info, ComPtr<ID3D12Device> device, ComPtr<IDXGIFactory> dxgi, ComPtr<ID3D12CommandQueue> cmdQueue);
	void Present(); // 현재 화면 출력
	void SwapIndex(); // Index를 스왑(0 or 1로)

	ComPtr<IDXGISwapChain> GetSwapChain() { return _swapChain; } // swapChain 반환
	ComPtr<ID3D12Resource> GetRenderTarget(int32 index) { return _rtvBurffer[index]; } // Resource 반환

	ComPtr<ID3D12Resource> GetCurrentBackBufferResource() { return _rtvBurffer[_backBufferIndex]; } // BackBuffer을 이용하여 어떤 리소스를 사용해야 하는 지 건내줌(BackBuffer)을 건내줌

	D3D12_CPU_DESCRIPTOR_HANDLE GetBackRTV() { return _rtvHandle[_backBufferIndex]; }

private:
	void CreateSwapChain(const WindowInfo& info, ComPtr<IDXGIFactory> dxgi, ComPtr<ID3D12CommandQueue> cmdQueue);
	void CreateRTV(ComPtr<ID3D12Device> device);

private:
	ComPtr<IDXGISwapChain>	_swapChain;

	ComPtr<ID3D12DescriptorHeap>	_rtvHeap;
	uint32							_rtvHeapSize = 0;
	D3D12_CPU_DESCRIPTOR_HANDLE		_rtvHandle[SWAP_CHAIN_BUFFER_COUNT];

	ComPtr<ID3D12Resource>	_rtvBurffer[SWAP_CHAIN_BUFFER_COUNT]; // 그릴 대상이다. 특수 종이
	uint32					_backBufferIndex = 0; // BackBuffer를 추적하기 위함
};
